import {Toolkit} from 'actions-toolkit'
import fs from 'fs'

type HandlerOpts = {
  severity?: string
  vulnerableVersionRange?: string
  empty?: boolean
}

describe('Vulnerability Scan', () => {
  let action: (tools: Toolkit) => unknown
  let tools: Toolkit
  let originalDate: DateConstructor

  Toolkit.run = jest.fn(async actionFn => {
    action = actionFn
  })

  // Load up our entrypoint file
  require('.')

  beforeEach(() => {
    process.env.MANIFEST_PATH = './fixtures/deps.json'

    // eslint-disable-next-line no-console
    console.log = jest.fn()
    process.stdout.write = jest.fn()
    tools = new Toolkit()
    tools.arguments.ecosystem = 'npm'
    tools.exit.success = jest.fn()
    tools.exit.failure = jest.fn()
    tools.exit.neutral = jest.fn()
    const expectedDate = new Date('2019-04-02T16:06:01.107Z')
    originalDate = Date
    global.Date = jest.fn(() => expectedDate) as any
  })

  afterEach(() => {
    global.Date = originalDate
  })

  it('fails and reports security vulnerabilities', async () => {
    tools.github.graphql = jest.fn().mockImplementation(
      makeHandler({
        severity: 'HIGH',
        vulnerableVersionRange: '< 2.0.0'
      })
    )

    await action(tools)

    expect(tools.exit.failure).toHaveBeenCalled()
    expect(process.stdout.write).toHaveBeenCalledWith(
      fs.readFileSync('./fixtures/output.txt').toString()
    )
  })

  it('fails and exits with a neutral status with FAIL_NEUTRAL', async () => {
    process.env.FAIL_NEUTRAL = 'true'

    tools.github.graphql = jest.fn().mockImplementation(() => {
      throw new Error('Error')
    })

    await action(tools)

    expect(tools.exit.neutral).toHaveBeenCalled()
    Reflect.deleteProperty(process.env, 'FAIL_NEUTRAL')
  })

  it('skips development dependencies with NO_DEV', async () => {
    process.env.NO_DEV = 'true'

    tools.github.graphql = jest.fn().mockImplementation(
      makeHandler({
        severity: 'HIGH',
        vulnerableVersionRange: '< 2.0.0'
      })
    )

    await action(tools)

    expect(tools.exit.success).toHaveBeenCalled()

    Reflect.deleteProperty(process.env, 'NO_DEV')
  })

  it('succeeds when package is not in vulnerable range', async () => {
    tools.github.graphql = jest.fn().mockImplementation(
      makeHandler({
        severity: 'HIGH',
        vulnerableVersionRange: '< 1.0.0'
      })
    )

    await action(tools)

    expect(tools.exit.success).toHaveBeenCalled()
  })

  it('succeeds when no vulnerabilities are found', async () => {
    tools.github.graphql = jest.fn().mockImplementation(
      makeHandler({
        empty: true
      })
    )

    await action(tools)

    expect(tools.exit.success).toHaveBeenCalled()
  })

  it('succeeds when the lower-bound severity is above the vulnerability severity', async () => {
    tools.arguments.severity = 'critical'

    tools.github.graphql = jest.fn().mockImplementation(
      makeHandler({
        severity: 'HIGH',
        vulnerableVersionRange: '< 2.0.0'
      })
    )

    await action(tools)

    expect(tools.exit.success).toHaveBeenCalled()
  })
})

function makeHandler(opts: HandlerOpts) {
  return function handler(_query: any, variables: any) {
    if (
      opts.empty ||
      variables.cursor === 'end' ||
      variables.package === 'passing'
    ) {
      return {
        securityVulnerabilities: {
          edges: []
        }
      }
    }

    return {
      securityVulnerabilities: {
        edges: [
          {
            cursor: 'end',

            node: {
              severity: opts.severity,
              vulnerableVersionRange: opts.vulnerableVersionRange,
              package: {
                name: 'failing'
              },
              advisory: {
                description: 'A security vulnerability exists',
                publishedAt: new Date().toISOString(),
                ghsaId: 'ghsa-id',
                references: [
                  {
                    url: 'https://example.com/failing'
                  }
                ]
              }
            }
          }
        ]
      }
    }
  }
}
